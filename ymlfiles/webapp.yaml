- name: deploy webapp image on K8S
  hosts: k8smaster
  tasks:
     - name: create directory
       file:
         path: /sites/scripts
         state: directory
         owner: ubuntu
         group: ubuntu
         mode: '0777'
       become: yes
     - name: create one more directoy for logs
       file:
         path: /sites/logs
         state: directory
         owner: ubuntu
         group: ubuntu
         mode: '0777'
       become: yes
     - name: copy host file 
       copy: src=hosts dest=/sites/scripts mode=0777
     - name: transfer the ns script to master node
       copy: src=check_ns.sh dest=/sites/scripts mode=0777
     - name: run the script on master node
       shell: sh /sites/scripts/check_ns.sh
       register: output
     - debug: msg={{ output.stdout }}
     - name: transfer the svc and deploy script to master node
       copy: src=check_svc_deploy.sh dest=/sites/scripts mode=0777
     - name: instead of deleting ns every time just delete svc and deploy
       shell: sh /sites/scripts/check_svc_deploy.sh
       register: output
     - debug: msg={{ output.stdout }}
     - name: Getting target ip
       shell: sed -n '/k8sworker]/,/k8smaster]/p' /sites/scripts/hosts | sed '1d;$d' | awk '{print $1}' 
       args:
         warn: no
       register: targetip
     - debug: msg={{ targetip.stdout }}
     - set_fact: target_ip="{{ targetip.stdout | replace('\n', ' ') }}"
     - name: run deploy command on masternode
       command: kubectl run webapp --image=kiranp23/webapp:latest --replicas=1 -n com-att-oce-test
     - name: expose deployment to external ip
       shell: |
             for i in {{ target_ip }}
             do
               j=$(echo "$i" | cut -d '.' -f4) 
               kubectl expose deploy webapp --external-ip="${i}" --port=7010 --target-port=8080 --type=NodePort --name=webapp-${j} -n com-att-oce-test
             done
     - name: get pod details
       shell: kubectl get po -n com-att-oce-test | grep webapp | grep -iv Terminating | awk '{print $1}' | head -1
       register: result
     - debug: msg={{ result.stdout }}
     - set_fact: pod={{ result.stdout }}
     - name: getting pod log and searching string
       shell: |
          until $(kubectl logs {{ pod }} -n com-att-oce-test >> /sites/logs/webapp-pod.log && grep "Server startup" /sites/logs/webapp-pod.log > /dev/null); do
           printf "Pod is coming up\n" 
           sleep 10
          done
       register: result
     - debug: msg="Pod is up and running"
     - name: print out search string from log
       shell: grep "Server startup" /sites/logs/webapp-pod.log
       register: result
     - debug: msg={{ result.stdout }}
     - debug:
           msg: "Server is up and running.. run health check"
     - name: removing the log file
       file:
         path: /sites/logs/webapp-pod.log
         state: absent
     - name: get the nodeport
       shell: |
           for i in {{ target_ip }}
           do 
            j=$(echo "$i" | cut -d '.' -f4)
            kubectl describe svc webapp-${j} -n com-att-oce-test | grep "NodePort:" | awk -F">" '{print $2}' | awk -F"/" '{print $1}' | sed -e 's/^[ \t]*//'
           done
       register: node_port
     - debug: msg={{ node_port.stdout }}
     - set_fact: nodeport="{{ node_port.stdout | replace('\n', ' ') }}" 
     - name: doing health check for one nodeport
       shell: echo {{ nodeport }} | awk '{print $1}'
       register: result
     - set_fact: port={{ result.stdout }}
     - name: master node public ip
       shell: curl http://169.254.169.254/latest/meta-data/public-ipv4
       args:
         warn: no
       register: result
     - set_fact: public_ip={{ result.stdout }}
     - name: Run Health Check
       uri: url=http://{{ public_ip }}:{{ port }}/webapp/login.html
       register: result
     - debug: msg="Url Status is {{ result.status }}"
     - name: Health Check Url 
       debug:
        var: result.url
     - name: Running pods
       command: kubectl get po -n com-att-oce-test -o wide
       register: result
     - debug: msg="{{ result.stdout | replace('\n', ' ') }}"
